---

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>Four Cards Problem</title>
  </head>
  <body>
    <h1>Four Cards Problem</h1>

    <div>
      <label for="North">North:</label>
      <select id="North" name="North">
        <option value="up">Up</option>
        <option value="down">Down</option>
      </select>
    </div>
    <div>
      <label for="East">East:</label>
      <select id="East" name="East">
        <option value="up">Up</option>
        <option value="down">Down</option>
      </select>
    </div>
    <div>
      <label for="South">South:</label>
      <select id="South" name="South">
        <option value="up">Up</option>
        <option value="down">Down</option>
      </select>
    </div>
    <div>
      <label for="West">West:</label>
      <select id="West" name="West">
        <option value="up">Up</option>
        <option value="down">Down</option>
      </select>
    </div>
    <br />
    <button id="solvePuzzle">Solve Puzzle</button>
    <hr />
    <center><h3>Progress</h3></center>
    <div id="progressLog"></div>

    <script>
      //Let addd listener to our button OLD School JavaScript Here! trying to avoid using framworks like rext to make it simple :)
      document
        .getElementById("solvePuzzle")
        .addEventListener("click", function () {
          // Define the state of the cards
          let cards = {
            North: document.getElementById("North").value,
            East: document.getElementById("East").value, // or 'up'
            South: document.getElementById("South").value, // or 'up'
            West: document.getElementById("West").value, // or 'up'
          };

          function flipCard(...directions) {
            let logMsg = "";
            directions.forEach((direction) => {
              cards[direction] = cards[direction] === "up" ? "down" : "up";
              logMsg += `${direction}=${cards[direction]}; `;
            });
            logProgress(logMsg);
          }

          function isAllFaceUp() {
            return Object.values(cards).every((card) => card === "up");
          }

          function rotateTable() {
            const directions = ["North", "East", "South", "West"];
            const randomIndex = Math.floor(Math.random() * 4);
            const newCards = {};

            directions.forEach((direction, index) => {
              newCards[direction] =
                cards[directions[(index + randomIndex) % 4]];
            });

            cards = newCards;
            logProgress(`Rotating Table ${JSON.stringify(cards)}`);
          }

          function logProgress(log) {
            document.getElementById("progressLog").innerText += `\n${log}`;
          }

          function resetLog() {
            document.getElementById("progressLog").innerText = "";
          }

          resetLog();

          logProgress("Solving this puzzle");
          while (!isAllFaceUp()) {
            flipCard("North", "South");
            rotateTable();

            if (isAllFaceUp()) break;

            flipCard("East");
            rotateTable();

            if (isAllFaceUp()) break;

            flipCard("South");
            rotateTable();

            if (isAllFaceUp()) break;

            //const faceDownCards = getFaceDownCards();
            //flipCard(...faceDownCards);
            rotateTable();
          }

          logProgress("I'm Done!");
        });
    </script>
    <script>
      window['_fs_host'] = 'fullstory.com';
      window['_fs_script'] = 'edge.fullstory.com/s/fs.js';
      window['_fs_org'] = 'o-1PTZ8K-na1';
      window['_fs_namespace'] = 'FS';
      (function(m,n,e,t,l,o,g,y){
          if (e in m) {if(m.console && m.console.log) { m.console.log('FullStory namespace conflict. Please set window["_fs_namespace"].');} return;}
          g=m[e]=function(a,b,s){g.q?g.q.push([a,b,s]):g._api(a,b,s);};g.q=[];
          o=n.createElement(t);o.async=1;o.crossOrigin='anonymous';o.src='https://'+_fs_script;
          y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);
          g.identify=function(i,v,s){g(l,{uid:i},s);if(v)g(l,v,s)};g.setUserVars=function(v,s){g(l,v,s)};g.event=function(i,v,s){g('event',{n:i,p:v},s)};
          g.anonymize=function(){g.identify(!!0)};
          g.shutdown=function(){g("rec",!1)};g.restart=function(){g("rec",!0)};
          g.log = function(a,b){g("log",[a,b])};
          g.consent=function(a){g("consent",!arguments.length||a)};
          g.identifyAccount=function(i,v){o='account';v=v||{};v.acctId=i;g(o,v)};
          g.clearUserCookie=function(){};
          g.setVars=function(n, p){g('setVars',[n,p]);};
          g._w={};y='XMLHttpRequest';g._w[y]=m[y];y='fetch';g._w[y]=m[y];
          if(m[y])m[y]=function(){return g._w[y].apply(this,arguments)};
          g._v="1.3.0";
      })(window,document,window['_fs_namespace'],'script','user');
      </script>
  </body>
</html>
